// Generated by Copilot
import { startServer } from '~/src/index'
import { TextEncoder, TextDecoder } from 'util'

describe('Server Startup', () => {
  let mockCreateServer
  let mockLogger
  let mockConfig

  beforeAll(() => {
    Object.assign(global, { TextDecoder, TextEncoder }) // Mock the TextEncoder class globally
  })

  beforeEach(() => {
    mockCreateServer = jest.fn().mockResolvedValue({
      start: jest.fn(),
      logger: {
        info: jest.fn(),
        error: jest.fn()
      }
    })
    mockLogger = {
      info: jest.fn(),
      error: jest.fn()
    }
    mockConfig = {
      get: jest.fn().mockReturnValue(3000)
    }
  })

  it('should start the server and log success messages', async () => {
    await startServer(mockCreateServer, mockLogger, mockConfig)
    expect(mockCreateServer).toHaveBeenCalled()
    expect(mockLogger.info).toHaveBeenCalledWith('Server started successfully')
    expect(mockLogger.info).toHaveBeenCalledWith(
      'Access your frontend on http://localhost:3000'
    )
  })

  it('should log an error and exit if server startup fails', async () => {
    const error = new Error('Startup failed')
    mockCreateServer.mockRejectedValueOnce(error)
    const exitSpy = jest.spyOn(process, 'exit').mockImplementation(() => {})
    await startServer(mockCreateServer, mockLogger, mockConfig).catch(() => {})
    expect(mockLogger.error).toHaveBeenCalledWith(
      'Failed to start server',
      error
    )
    expect(exitSpy).toHaveBeenCalledWith(1)
    exitSpy.mockRestore()
  })
})
